#!/usr/bin/env python

from __future__ import division,print_function
import os
import sys
import fcntl
import socket
import time
from numpy import *
from PIL import Image
import ConfigParser

def configure(path):
  # Read configuration
  conf = ConfigParser.SafeConfigParser()
  conf.read(path)
  def get(section,name,default):
    try:
      return type(default)(conf.get(section,name,default))
    except ConfigParser.NoOptionError:
      return default

  # Global configuration
  class Options(object):
    pass
  opt = Options()
  opt.port = get('all','port',9897) # Port for pixel value packets
  opt.size = get('all','size',200) # Default number of LEDs per strip
  opt.frequency = get('all','frequency',16.) # Image repeats every 1/frequency
  opt.frame_rate = get('all','frame_rate',1000) # Frame rate at which to update each strip
  opt.reload_time = get('all','reload_time',60.) # How often to change images (in seconds)
  opt.mode = get('all','mode','image')
  opt.animate = get('all','animate',1)
  opt.correct = get('all','correct',1)
  opt.scale = get('all','scale',1.)

  opt.aspect = get('all','aspect',0)
  opt.height = get('all','height',2.5) # Strip height (same units as radius)
  opt.radius = get('all','radius',2.5) # Radius from center to strips (same units as height)

  opt.use_mouse = get('all','use_mouse',0)
  opt.mouse_dev = get('all','mouse_dev','/dev/input/mouse0') # Mouse device to read angle from
  opt.mouse_frequency = get('all','mouse_frequency',24.) # Frequency of mouse polling

  # Strip configuration
  strips = []
  for name in sorted(conf.sections()):
    if 'strip' in name:
      strips.append({
        'name':   name,
        'port':   opt.port,
        'number': get(name,'number',0),
        'ip':     conf.get(name,'ip'),
        'size':   get(name,'size',opt.size),
      })
  print('strips:')
  for s in strips:
    print('  %s : ip %s, number %d, size %d'%(s['name'],s['ip'],s['number'],s['size']))

  # Override number of total strips
  opt.strips = get('all','strips',len(strips))

  # All done
  return opt,strips

# Color correction taken from PixelPusher code
correction = array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,
  8,8,8,9,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,13,13,13,14,14,14,14,15,15,16,16,16,17,17,17,18,18,19,19,20,
  20,20,21,21,22,22,23,23,24,25,25,26,26,27,27,28,29,29,30,31,31,32,33,34,34,35,36,37,38,38,39,40,41,42,43,44,
  45,46,47,48,49,50,51,52,54,55,56,57,59,60,61,63,64,65,67,68,70,72,73,75,76,78,80,82,83,85,87,89,91,93,95,97,
  99,102,104,106,109,111,114,116,119,121,124,127,129,132,135,138,141,144,148,151,154,158,161,165,168,172,176,
  180,184,188,192,196,201,205,209,214,219,224,229,234,239,244,249,255],dtype=uint8)

def rainbow(w,h):
  I = zeros((w,h,3),uint8)
  # Black jump to red to green to blue jump to black
  for x in xrange(w):
    for y in xrange(h):
      t = 2*y/h-x/w
      if t<0 or t>1:
        i = 0,0,0
      elif t<1/2:
        s = 2*t
        i = 1-s,s,0
      else:
        s = 2*t-1
        i = 0,1-s,s
      I[x,y] = 255*asarray(i)
  return I

def single(w,h):
  I = zeros((h,h,3),uint8)
  I[:] = 255,0,0
  for i in xrange(h):
    I[i,i] = 255,255,255
  return I

class POV(object):
  """Precomputed information to display one image via persistence of vision"""

  # Packet header size
  header_size = 5

  def __init__(self,opt,size,image):
    if opt.aspect: # Adjust wrapping to match aspect ratios
      width = opt.height/image.size[1]*image.size[0]
      # Say we pick image width w.  Every 1/frequency we draw one cylinder, for a speed of
      #   2*pi*radius*frequency
      # Every w/frame_rate we draw the whole image, for a speed of
      #   width*frame_rate/w
      # Equating speeds, we get
      #   width*frame_rate/w = 2*pi*radius*frequency
      #   w = width*frame_rate/(2*pi*radius*frequency)
      w = width*opt.frame_rate/(2*pi*opt.radius*opt.frequency)
    else: # Wrap image exactly once around the cylinder
      w = opt.frame_rate/opt.frequency
    w = int(ceil(w)) # Round up so that w > 0.  Just in case.
    h = size

    # Convert to numpy
    if opt.mode == 'image':
      image = image.convert('RGB').resize((w,h))
      image = array(image,uint8).reshape(h,w,3)[::-1].swapaxes(0,1)
    else:
      if   opt.mode == 'black':   image = zeros((w,h,3),uint8)
      elif opt.mode == 'white':   image = 255*ones((w,h,3),uint8)
      elif opt.mode == 'rainbow': image = rainbow(w,h)
      elif opt.mode == 'single':  image = single(w,h)
      else: raise RuntimeError('mode must be one of: image, rainbow, black')
      w = image.shape[0]

    # Optionally apply color correction
    if opt.correct:
      image = correction[image]
    image *= opt.scale

    # Number of pixels around the cylinder
    if opt.aspect:
      self.around = int(ceil(opt.frame_rate/opt.frequency))
    else:
      self.around = w

    # Reshape into nearly-ready-to-send packets
    buf = image.reshape(w,3*h)
    buf = hstack([zeros((w,self.header_size),dtype=uint8),buf])
    self.buf = buf

    # Prepare to send UDP packets
    self.sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    self.packet = 0

  def send(self,strip,n):
    buf = self.buf[n%len(self.buf)] # Python's % treats negative numerators correctly!
    buf[:4] = asarray(self.packet,dtype('>u4')).flatten().view(uint8)
    buf[4] = strip['number']
    self.packet += 1
    if 0:
      print('send: ip %s, port %d, number %d, n %d, len %s'%(strip['ip'],strip['port'],strip['number'],n,len(buf)))
    self.sock.sendto(buf,(strip['ip'],strip['port']))

# The image extensions we recognize (used to sweep directories clean)
image_exts = frozenset(e for l in ('png','jpg','jpeg','gif','bmp') for e in ('.'+l,'.'+l.upper()))

def image_paths(path):
  if os.path.isdir(path):
    paths = []
    for r,ds,fs in os.walk(path):
      ds[:] = [d for d in ds if not d.startswith('.')]
      for f in fs:
        if os.path.splitext(f)[1] in image_exts:
          paths.append(os.path.join(r,f))
    return paths
  else:
    return [path]

def die(s):
  print(s,file=sys.stderr)
  sys.exit(1)

def main():
  # Read command line arguments
  if len(sys.argv) < 3:
    die('usage: %s <config> <image-or-dir>...\nexample: %s config data/red-circle.gif'%(sys.argv[0],sys.argv[0]))
  opt,strips = configure(sys.argv[1])
  paths = sys.argv[2:]

  def reload():
    images = [i for p in paths for i in image_paths(p)]
    if not images:
      die('No images found in paths %s'%(paths,))
    path = images[random.randint(len(images))]
    print('Loading image %s'%path)
    # TODO: Don't assume all strips are the same size
    return POV(opt,strips[0]['size'],Image.open(path))

  # Prepare for mouse support if desired
  if opt.use_mouse:
    mouse_file = open(opt.mouse_dev)
    mouse_fd = mouse_file.fileno()
    fcntl.fcntl(mouse_fd,fcntl.F_SETFL,fcntl.fcntl(mouse_fd,fcntl.F_GETFL)|os.O_NONBLOCK)
    mouse_n = int(ceil(opt.frame_rate/opt.mouse_frequency))
    mouse_x = 0.
  else:
    mouse_n = 1<<60

  # Display images forever
  dt = 1/opt.frame_rate
  reload_n = int(ceil(opt.reload_time*opt.frame_rate))
  t0 = time.time()
  for n in xrange(1<<62 if opt.animate else 1):
    # Reload image
    if n%reload_n==0:
      pov = reload()

    # Draw on LEDs
    x = mouse_x if opt.use_mouse else n
    for i,strip in enumerate(strips):
      pov.send(strip,x+pov.around*i//opt.strips)

    # Wait for next frame
    t = time.time()
    wait = dt*(n+1)-(t-t0)
    if wait > 0:
      time.sleep(wait)
    if n%1000==0 and n:
      print('n %dk, t %g'%(n//1000,t-t0))

    # Update mouse
    if n%mouse_n==0 and opt.use_mouse:
      ds = os.read(mouse_fd,3<<10)
      assert len(ds)%3==0
      for i in xrange(len(ds)//3):
        dx = ord(ds[3*i+2])
        mouse_x += dx-((0x80&dx)<<1)

if __name__ == '__main__':
  main()
